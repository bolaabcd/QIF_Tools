#include <bits/stdc++.h>

using namespace std;

string varname;
int ninners, nsecs;
vector<string> names;
vector<double> outers;
vector<vector<double>> inners; // inners[y][x] = p(x|y)
vector<vector<double>> distribs;

void get_data() {
	inners.clear();
	names.clear();
	outers.clear();
	cin >> varname;
	cin >> ninners >> nsecs;
	names.resize(nsecs);
	outers.resize(ninners);
	for(int i = 0; i < nsecs; i++) {
		string type,real_name;
		cin >> type >> real_name;
		names[i] = type + ' ' + real_name;
	}
	for(int i = 0; i < ninners; i++)
		cin >> outers[i];
	inners.resize(ninners,vector<double>(nsecs));
	for(int i = 0; i < ninners; i++)
		for(int j = 0; j < nsecs; j++)
			cin >> inners[i][j];
}

void get_distribs() {
	if(varname != "strat")
		return;
	int nstrats,nsec_strats;
	cin >> nstrats >> nsec_strats;
	assert(nstrats == nsecs);
	distribs.clear();
	distribs.resize(nstrats,vector<double>(nsec_strats));
	for(int i = 0; i < nstrats; i++)
		for(int j = 0; j < nsec_strats; j++)
			cin >> distribs[i][j];
}

double manh_dist(vector<double> &a, vector<double> &b) {
	assert(a.size() == b.size());
	double tot = 0;
	for(int i = 0; i < a.size(); i++)
		tot += abs(a[i]-b[i]);
	return tot;
}

void compute_manhattan() {
	if(varname != "strat")
		return;
	double tot = 0;
	int nstrats = nsecs;
	for(int y = 0; y < ninners; y++) {
		double maxi = -1;
		for(int sigmal = 0; sigmal < nstrats; sigmal++) {// can only guess the possible strategies
			double tmp = 0;
			for(int sigma = 0; sigma < nstrats; sigma++)
				tmp += manh_dist(distribs[sigmal],distribs[sigma])*outers[y]*inners[y][sigma];
			maxi = max(tmp,maxi);
		}
		tot += maxi;
	}
	cout << fixed << setprecision(8);
	cout << "> Manhattan distance vulnerability (limited guesses) = " << tot << endl;
}

int main() {
	int t;
	cout << "Computing vulnerability for Manhattan distance" << endl;
	cin >> t;
	while(t--) {
		get_data();
		get_distribs();
		compute_manhattan();
	}
}
